from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
import pandas as pd
import json
import re
import os
import gdown

# üîó Google Drive —Ñ–∞–π–ª (Excel)
GDRIVE_LINK = "https://drive.google.com/uc?id=1BVD0nAZoj5Ug2y3bytqfRwWRQp2P8hA2"
XLSX_FILE = "svodna_tablycya.xlsx"
excel_data = {}

def download_excel():
    if os.path.exists(XLSX_FILE):
        os.remove(XLSX_FILE)
    gdown.download(GDRIVE_LINK, XLSX_FILE, quiet=False)

def load_excel_to_memory():
    xls = pd.ExcelFile(XLSX_FILE)
    data = {}
    for sheet in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet)
        df.columns = [c.lower().strip() for c in df.columns]
        if "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä—ñ–≤/–ø–æ—Å–ª—É–≥" in df.columns and "–¥–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏" in df.columns:
            df["–¥–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏"] = pd.to_datetime(df["–¥–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏"], errors="coerce")
            data[sheet] = df
    return data

# üîê –ê–¥–º—ñ–Ω —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
ADMIN_ID = 339950143
USERS_FILE = "allowed_users.json"

def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

allowed_users = load_users()

# üìç /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = f"üëã –ü—Ä–∏–≤—ñ—Ç, {update.effective_user.first_name}!
–í–∞—à Telegram ID: {user_id}"
    keyboard = [[InlineKeyboardButton("üîé –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç", callback_data="make_query")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(msg, reply_markup=reply_markup)

# üìç /id
async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à Telegram ID: {update.effective_user.id}")

# üìç /users
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return
    await update.message.reply_text("üë• –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö ID:\n" + "\n".join(str(uid) for uid in allowed_users))

# üìç /admin add
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    args = context.args
    if len(args) != 2 or args[0] != "add":
        await update.message.reply_text("‚öôÔ∏è –§–æ—Ä–º–∞—Ç:\n/admin add 123456789")
        return

    try:
        new_id = int(args[1])
        if new_id not in allowed_users:
            allowed_users.append(new_id)
            save_users(allowed_users)
            await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {new_id} –¥–æ–¥–∞–Ω–æ.")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {new_id} –≤–∂–µ —î.")
    except ValueError:
        await update.message.reply_text("‚ùó ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

# üîò –ö–Ω–æ–ø–∫–∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üìå –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç:\n‚ûî –ê—Ä—Ç–∏–∫—É–ª (3364150) \u0447–∏ VRP350/VRP 350/VRP-350, —Å—ñ—á–µ–Ω—å-–≥—Ä—É–¥–µ–Ω—å 2024")

# üìä –ê–Ω–∞–ª—ñ–∑
month_map = {
    "—Å—ñ—á–µ–Ω—å": "January", "–ª—é—Ç–∏–π": "February", "–±–µ—Ä–µ–∑–µ–Ω—å": "March", "–∫–≤—ñ—Ç–µ–Ω—å": "April",
    "—Ç—Ä–∞–≤–µ–Ω—å": "May", "—á–µ—Ä–≤–µ–Ω—å": "June", "–ª–∏–ø–µ–Ω—å": "July", "—Å–µ—Ä–ø–µ–Ω—å": "August",
    "–≤–µ—Ä–µ—Å–µ–Ω—å": "September", "–∂–æ–≤—Ç–µ–Ω—å": "October", "–ª–∏—Å—Ç–æ–ø–∞–¥": "November", "–≥—Ä—É–¥–µ–Ω—å": "December"
}

def normalize(text):
    return re.sub(r"[\s\-]", "", str(text)).lower()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in allowed_users:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    text = update.message.text.lower().replace("‚Äì", "-")

    match = re.match(r"(.+?),\s*(.+?)\s*-\s*(.+?)\s*(\d{4})", text)
    if match:
        raw_skus, month_start, month_end, year = match.groups()
        sku_variants = [normalize(s) for s in raw_skus.split("/") if s.strip()]
        month_start_en = month_map.get(month_start.strip())
        month_end_en = month_map.get(month_end.strip())

        if not month_start_en or not month_end_en:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º—ñ—Å—è—Ü—ñ.")
            return

        start_date = pd.to_datetime(f"1 {month_start_en} {year}", dayfirst=True)
        end_date = pd.to_datetime(f"1 {month_end_en} {year}", dayfirst=True) + pd.offsets.MonthEnd(0)
    else:
        sku_variants = [normalize(s) for s in text.split("/") if s.strip()]
        start_date, end_date = None, None

    rows = []
    for sheet, df in excel_data.items():
        df_filtered = df[df["–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä—ñ–≤/–ø–æ—Å–ª—É–≥"].apply(
            lambda x: any(variant in normalize(x) for variant in sku_variants)
        )]

        if start_date and end_date:
            df_filtered = df_filtered[
                (df_filtered["–¥–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏"] >= start_date) &
                (df_filtered["–¥–∞—Ç–∞ –≤–∏–ø–∏—Å–∫–∏"] <= end_date)
            ]

        if not df_filtered.empty:
            qty = int(df_filtered["–∫—ñ–ª—å–∫—ñ—Å—Ç—å (–æ–±‚Äô—î–º , –æ–±—Å—è–≥)"].sum())
            avg = round(df_filtered["—Ü—ñ–Ω–∞ –∑ –ø–¥–≤"].mean(), 2)
            rows.append((sheet, qty, avg))

    if not rows:
        await update.message.reply_text("–ü—Ä–æ–¥–∞–∂—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    rows.sort(key=lambda x: x[1], reverse=True)
    table = "üìä <b>–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤</b>\n\n"
    table += "<pre>{:<20} {:>10} {:>15}</pre>\n".format("–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞")
    for row in rows:
        name = row[0][:20]
        qty = f"{row[1]:,}".replace(",", " ")
        avg = f"{row[2]:,.2f}".replace(",", " ")
        table += "<pre>{:<20} {:>10} {:>15}</pre>\n".format(name, qty, avg)

    await update.message.reply_text(table, parse_mode="HTML")

# üöÄ –ó–∞–ø—É—Å–∫

def main():
    print("‚òÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel –∑ Google Drive...")
    download_excel()
    global excel_data
    excel_data = load_excel_to_memory()
    print("‚úÖ Excel –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ –ø–∞–º'—è—Ç—å. –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")

    app = ApplicationBuilder().token("7762946339:AAGyH09Ty3eODo2SQTNW__ARZxshGo00NV8").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("id", get_id))
    app.add_handler(CommandHandler("users", list_users))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
